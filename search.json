[{"title":"Hello World","url":"/2021/06/23/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new posthexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun serverhexo server\n\nMore info: Server\nGenerate static fileshexo generate\n\nMore info: Generating\nDeploy to remote siteshexo deploy\n\nMore info: Deployment\n"},{"title":"PDF批量转图片","url":"/2025/06/24/pdf%E6%89%B9%E9%87%8F%E8%BD%AC%E5%9B%BE%E7%89%87/","content":"背景最近在做一个项目，需要在弹窗里展示政策PDF内容。本来想着直接把PDF文件放在前端项目里，但一个文件大几十M，加载起来很慢。而且客户不想看到PDF在网页中的预览框。考虑到只是展示内容，不需要交互功能，就想着把PDF转成图片，这样既能缩小文件体积，又能提升加载速度。\n解决方案经过一番搜索，发现 ImageMagick 是个不错的选择。它不仅能处理PDF转图片，还支持批量处理，正好符合我的需求。\n工具准备\n安装 ImageMagick\n\nWindows: 下载安装包或使用 choco install imagemagick\n安装后记得重启命令行\n\n\n验证安装\nmagick --version\n\n安装ImageMagick底层依赖 Ghostscript\n\n下载适合系统版本的安装包（通常是 gswin64.exe）\n\n\n验证安装\ngswin64c -version\n\n批量转换脚本为了方便使用，我写了个批处理脚本，支持批量转换PDF文件：\n@echo offsetlocal enabledelayedexpansion:: 设置目标 DPI，调整这里即可改变分辨率set dpi=150:: 设置输出图片的质量（范围：1-100）set quality=80:: 定义 A4 的实际尺寸（单位：英寸）set a4_width_inch=8.27set a4_height_inch=11.69:: 使用 PowerShell 动态计算 A4 分辨率（宽度和高度）for /f &quot;tokens=*&quot; %%A in (&#x27;powershell -Command &quot;[math]::Round(%a4_width_inch% * %dpi%)&quot;&#x27;) do set width=%%Afor /f &quot;tokens=*&quot; %%A in (&#x27;powershell -Command &quot;[math]::Round(%a4_height_inch% * %dpi%)&quot;&#x27;) do set height=%%A:: 输出宽高以及质量参数以供验证echo DPI: %dpi%echo Width: %width% pixelsecho Height: %height% pixelsecho Quality: %quality%%:: 验证宽高是否正确if &quot;%width%&quot;==&quot;&quot; (    echo 宽度计算失败，请检查 PowerShell 是否可用或计算逻辑是否正确。    pause    exit /b)if &quot;%height%&quot;==&quot;&quot; (    echo 高度计算失败，请检查 PowerShell 是否可用或计算逻辑是否正确。    pause    exit /b):: 遍历当前目录中的所有 PDF 文件for %%f in (*.pdf) do (    :: 获取文件名（不带扩展名）    set filename=%%~nf    :: 创建与 PDF 同名的输出目录    mkdir &quot;!filename!&quot;    :: 转换 PDF 为图片，确保背景为白色，大小统一，设置质量    magick -density %dpi% &quot;%%f&quot; -background white -alpha remove -alpha off -resize %width%x%height% -gravity center -extent %width%x%height% -quality %quality% &quot;!filename!\\page-%%d.webp&quot;)echo 转换完成！pause\n\n使用心得参数调优经验\nDPI设置：\n\n150 DPI：适合大多数场景，文件大小和质量比较平衡\n200 DPI：高清显示，文件稍大\n100 DPI：文件最小，但可能不够清晰\n\n\n质量设置：\n\n80-90：推荐设置\n70以下：文件小但质量一般\n95以上：质量好但文件大\n\n\n\n效果对比转换后的文件结构：\n项目/├── convert_pdf_to_images.bat├── 政策文件.pdf└── 政策文件/    ├── page-0.webp    ├── page-1.webp    └── ...\n\n文件大小对比：\n\n原PDF：41.6MB\n转换后：约5.3M（WebP格式）\n压缩率：约87%\n\n总结这个方案在一定程度上解决了我的问题：\n\n✅ 1M以上的文件体积基本都大幅压缩了\n✅ 加载速度明显提升\n✅ 保持了良好的显示效果\n✅ 支持批量处理，效率高\n\n对于类似的需求，我觉得这个方案还是挺实用的。如果只是展示内容，转成图片确实比直接使用PDF要好很多。\n\n记录一下这个实用的解决方案，以后遇到类似需求可以直接用。\n","categories":["技术笔记"],"tags":["PDF转图片","前端优化","实用工具"]},{"title":"网页适老化","url":"/2025/06/25/%E9%80%82%E8%80%81%E5%8C%96/","content":"背景最近在做的项目有老年人模式的需求——也就是动态切换字体大小、元素间距等。\n解决方案项目使用element-ui、sass、sass-loader，在scss文件中定义变量，并利用:export导出变量，供JS使用。JS中读取变量，使用setProperty方法设置全局css变量。项目中所有需要动态改变大小的，都不直接使用px，而是使用css变量进行设置。\n使用开关动态切换常规&#x2F;老年人模式变量，以切换全局css变量值。\n以下是代码的实现：\n目录结构src├── styles│   ├── index.scss│   ├── variables.scss│   └── variables-senior.scss└── App.vue\n\n关键代码/* variables.scss *//* 无需动态改变的常量 */$main_color: #4077f4;// .../* 差异化变量 */$variables: (  // 字号  font_size_extra_large: 20px,  font_size_large: 18px,  font_size_medium: 16px,  font_size_base: 14px,  font_size_small: 13px,  font_size_extra_small: 12px,  // checkbox  checkbox_after_left: 4px,  checkbox_after_top: 1px,  // 表单项  form_item_margin_bottom: 16px,  search_btn_width: 70px,  search_btn_detail_width: 60px);:export &#123;  /* 常量部分 */  main_color: $main_color;  // ...  /* 变量自动导出 */  @each $name, $value in $variables &#123;    #&#123;$name&#125;: #&#123;$value&#125;;  &#125;&#125;\n\n/* variables-senior.scss */// 字体增量，可以统一控制放大倍率$font_size_increment: 5px;/* 差异化变量 */$variables: (  // 字号  font_size_extra_large: 20px + $font_size_increment,  font_size_large: 18px + $font_size_increment,  font_size_medium: 16px + $font_size_increment,  font_size_base: 14px + $font_size_increment,  font_size_small: 13px + $font_size_increment,  font_size_extra_small: 12px + $font_size_increment,  // checkbox  checkbox_after_left: 6px,  checkbox_after_top: 3px,  // 表单项  form_item_margin_bottom: 24px,  search_btn_width: 80px,  search_btn_detail_width: 80px);:export &#123;  /* 变量自动导出 */  @each $name, $value in $variables &#123;    #&#123;$name&#125;: #&#123;$value&#125;;  &#125;&#125;\n\n&lt;!-- 有的元素不能仅用变量控制，这时候就需要使用class .senior-mode，调整元素在老年人模式下的表现 --&gt;&lt;template&gt;  &lt;div id=&quot;app&quot; :class=&quot;&#123; &#x27;senior-mode&#x27;: isSeniorMode &#125;&quot;&gt;    &lt;el-switch v-model=&quot;isSeniorMode&quot; @change=&quot;toggleMode&quot;&gt;      老年人模式    &lt;/el-switch&gt;    &lt;router-view /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import normalVariables from &quot;@/styles/variables.scss&quot;import seniorVariables from &quot;@/styles/variables-senior.scss&quot;export default &#123;  name: &quot;app&quot;,  data() &#123;    return &#123;      isSeniorMode: false,    &#125;  &#125;,  mounted() &#123;    this.setMode()  &#125;,  methods: &#123;    toggleMode() &#123;      this.setMode(this.isSeniorMode)    &#125;,    setMode(isSenior = false) &#123;      const vars = isSenior ? seniorVariables : normalVariables      for (const [key, value] of Object.entries(vars)) &#123;        document.documentElement.style.setProperty(`--$&#123;key&#125;`, value)      &#125;    &#125;  &#125;&#125;&lt;/script&gt;\n\n/* style/index.scss */.el-button &#123;  font-size: var(--font_size_base);  &amp;--mini &#123;    font-size: var(--font_size_extra_small);  &#125;  &amp;--small &#123;    font-size: var(--font_size_base);  &#125;  &amp;--medium &#123;    font-size: var(--font_size_medium);  &#125;&#125;\n\n结语这个方案的效果还是比较满意的，衍生出来还可以封装成组件，实现大中小三种字号切换的模式\n","categories":["技术笔记"],"tags":["老年人模式","动态调整字体大小"]}]